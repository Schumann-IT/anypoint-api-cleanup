#%RAML 1.0
title: Core Services API Reference
mediaType: application/json
baseUri: https://anypoint.mulesoft.com/accounts/api

traits:
  offset-paginated: !include traits/offset-paginated.raml
  pagination-collection: !include traits/pagination-collection.raml
  rate-limited: !include traits/rate-limited.raml
  searchable: !include traits/searchable.raml
  sortable: !include traits/sortable.raml
  sortable_2: !include traits/arity/sortable_2.raml
  sortable_3: !include traits/arity/sortable_3.raml

uses:
  authorization: types/authorizations.raml
  authorize: types/authorize.raml
  authorizeOnBehalf: types/authorized-resources-on-behalf.raml
  clientProviders: types/external-client-provider.raml
  identityProviders: types/external-identity-provider.raml
  clients: types/clients.raml
  externalAccess: types/externalAccess.raml
  connectedApplications: types/connectedApplications.raml
  hubSpokeRelations: types/hubSpokeRelations.raml
  identities: types/identities.raml
  invites: types/invites.raml
  primitives: types/primitives.raml
  roles: types/roles.raml
  refreshTokens: types/refresh-tokens.raml
  teams: types/teams.raml
  users: types/users.raml
  teamsExperienceApi: types/teams-experience-api.raml
  validateOrganizationSettingsForClient: types/validate-organization-settings-for-client.raml

securitySchemes:
  oauth_2_0_raml_1_0: !include oauth_2_0_raml_1_0.raml
  basic:
    description: This endpoint supports Basic Authentication.
    type: Basic Authentication

securedBy: [ oauth_2_0_raml_1_0 ]

types:
  Organization:
    type: object
  Entitlements:
    type: object

/admin:
  /connectedApplications:
    description: Admin routes for interacting with Connected Applications owned by any organization

    /search:
      description: Search endpoint across all Connected Applications

      post:
        is: [
          offset-paginated,
          pagination-collection: {
            example: !include examples/connected-applications/connected-applications-secured.json,
            type: connectedApplications.ConnectedApplication
          },
          rate-limited
        ]
        queryParameters:
          includeUsage:
            description: flag to indicate whether to return usage statistics
            type: boolean
            default: false
        body:
          application/json:
            type: connectedApplications.ConnectedApplicationAdminSearch
            example: !include examples/connected-applications/connected-applications-admin-search.json

  /keys:
    /{usage}:
      get:
        description: Retrieves admin information about the JWKS
        queryParameters:
          retired?:
            description: If true, return only retired keys. If false, return only active keys. Otherwise, return both.
            type: boolean
        is: [
          offset-paginated,
          pagination-collection: {
            example: !include examples/jwks/debug.json,
            type: object
          }
        ]

      /rotate:
        post:
          description: Triggers a key rotation event
          responses:
            204:
              description: Success


/authorize:

  /context:
    post:
      description: Get the set of contexts in which the caller can perform an action on resources that match a template
      is: [
        pagination-collection: {
          example: !include examples/authorize_context_response.json,
          type: authorize.AuthorizeContextResult
        }
      ]
      body:
        application/json:
          example: !include examples/authorize_context.json
          type: authorize.AuthorizeContext

/connectedApplications:
  description: Access to connected applications
  get:
    description: Get all connected applications for the organization
    is: [
      offset-paginated,
      searchable: {targetDesc: 'all object properties'},
      sortable_2: {field_1: 'client_id', field_2: 'client_name', default: 'client_name'},
      rate-limited
    ]
    queryParameters:
      includeUsage:
        description: flag to indicate whether to return usage statistics
        type: boolean
        default: false
      orgId?:
          description: Provide an orgId to get all clients from other organization
          type: string
    responses:
      200:
        body:
          application/json:
            example: !include examples/connected-applications/connected-applications.json

  post:
    description: Create a new connected application
    body:
      application/json:
        example: !include examples/connected-applications/connected-application.json
        type: connectedApplications.ConnectedApplicationCreate
    responses:
      200:
        body:
          application/json:
            example: !include examples/connected-applications/connected-application.json
    is: [rate-limited]

  /{clientId}:
    description: Access to individual connected application
    get:
      description: Get a single connected application
      queryParameters:
        includeUsage:
          description: flag to indicate whether to return usage statistics
          type: boolean
          default: false
      responses:
        200:
          body:
            application/json:
              example: !include examples/connected-applications/connected-application.json
        404:
          description: Connected application with that clientId could not be found
      is: [rate-limited]

    patch:
      description: Patches a single connected application
      queryParameters:
        resetSecret?:
          description: Asks service to reset secret as part of this operation
          type: boolean
          default: false
      body:
        application/json:
          example: !include examples/connected-applications/connected-application-post.json
          type: connectedApplications.ConnectedApplicationUpdate

      responses:
        200:
          description: Connected application was successfully updated
          body:
            application/json:
              example: !include examples/connected-applications/connected-application.json
        404:
          description: Connected application with that clientId could not be found
      is: [rate-limited]

    delete:
      description: Deletes a single connected application
      responses:
        204:
          description: Connected application was deleted
      is: [rate-limited]

    /scopes:
      description: |
        Routes for operationg upon context-aware scopes assigned directly to the client's identity,
        only for use with the client_credentials grant type. Orthogonal to the set of scopes associated
        with user authorizations.
      get:
        description: |
          Retrieves context-aware scopes assigned to the connected application
        is: [
          offset-paginated,
          rate-limited
        ]
        responses:
          200:
            body:
              application/json:
                example: !include examples/connected-applications/connected-application-context-scopes-result.json

      put:
        description: |
          Replaces the entire list of context-aware scopes assigned to the connected application
        body:
          application/json:
            example: !include examples/connected-applications/connected-application-context-scopes-delta.json
            schema:  !include schemas/connected-applications/connected-application-context-scopes-delta.json
        responses:
          204:
            description: Connected application scopes were successfully replaced
        is: [rate-limited]

      patch:
        description: |
          Assigns additional context-aware scopes to the connected application.
          Does not unassign any existing scopes.
          Duplicate entries are ignored.
        body:
          application/json:
            example: !include examples/connected-applications/connected-application-context-scopes-delta.json
            schema:  !include schemas/connected-applications/connected-application-context-scopes-delta.json
        responses:
          204:
            description: Connected application scopes were successfully assigned
        is: [rate-limited]

      delete:
        description: |
          Unassigns context-aware scopes from the connected application.
          Scopes must exactly match in order to be removed.
        body:
          application/json:
            example: !include examples/connected-applications/connected-application-context-scopes-delta.json
            schema:  !include schemas/connected-applications/connected-application-context-scopes-delta.json
        responses:
          204:
            description: Connected application scopes were successfully unassigned
        is: [rate-limited]

    /revoke:
      delete:
        description: Revoke all access tokens and refresh tokens issued to the connected application
        responses:
          204:
            description: All tokens were revoked successfully
        is: [rate-limited]

/invites:
  description: Invite people to join the organization

  get:
    description: get outstanding or expired invites that match the criteria
    is: [
      offset-paginated,
      pagination-collection: {
        type: invites.Invite,
        example: !include examples/invites-paginated.json
      },
      searchable: {targetDesc: 'invited emails'},
      sortable_2: { field_1: 'invited_email', field_2: 'invited_at', default: 'invited_email' },
      rate-limited
    ]
    queryParameters:
      orgId:
        description: the id of the organization that the invites are for joining.
        type: string

    responses:
      400:
        description: Bad request; unknown organization, bad parameter or other failure

  post:
    description: Invite a person to join the organization
    body:
      application/json:
        type: invites.InviteNewList
        example: !include examples/invite-new.json
    responses:
      200:
        description: Success
        body:
          application/json:
            type: invites.InviteList
            example: !include examples/invites.json
      400:
        description: Bad request; unknown organization, bad parameter or other failure
    is: [rate-limited]

  delete:
    description: Invite a person to join your organization
    body:
      application/json:
        type: invites.InvitesIds
        example: !include examples/invite-ids-array.json
    responses:
      204:
        description: Success
      400:
        description: Bad request; unknown organization, bad parameter or no invite was deleted
    is: [rate-limited]

  /{inviteId}:
    description: Invite resource
    uriParameters:
      inviteId:
        description: The ID of the invite
        type: integer

    get:
      description: get an invite
      responses:
        200:
          description: Success
          body:
            application/json:
              type: invites.Invite
              example: !include examples/invite.json
        400:
          description: Bad request; bad parameter or other failure
        404:
          description: No invite exists in this organization for the given inviteId
      is: [rate-limited]

  /accept:
    get:
      description: Redirect to anypoint signin to accept an invite
      is: [rate-limited]

  /resend:
    description: Resend invites

    post:
      description: Resend a list of invites
      body:
        application/json:
          type: invites.InvitesIds
          example: !include examples/invite-ids-array.json
      responses:
        200:
          description: Success
          body:
            application/json:
              type: invites.InvitesResendResponse
              example: !include examples/invites-resend-response.json
        400:
          description: One or more of the invites are not in the organization or no invites were sent
      is: [rate-limited]

/users:
  /{userId}:
    /teams:
      get:
        description: Returns a list of teams the user is a member of
        queryParameters:
          ancestor_team_id?:
            description: team_id that must appear in the team's ancestor_team_ids.
            type: array
            items:
              type: string
          parent_team_id?:
            description: team_id of the immediate parent of the team to return.
            type: array
            items:
              type: string
          team_type:
            type: array
            items:
              type: string
            description: return only teams that are of this type
            required: false
          membership_type:
            type: array
            items:
              type: string
            description: return only teams where the user is this type of member
            required: false
        is: [
          searchable: { targetDesc: 'team name' },
          offset-paginated,
          pagination-collection: {
            example: !include examples/teams/team-collection-with-membership.json,
            type: teams.TeamIsMemberOf
          },
          sortable_3: { field_1: 'team_name', field_2: 'created_at', field_3: 'team_id', default: 'team_name' },
          rate-limited
        ]

/roles:
  /users:
    /search:
      description: Search users by role assignments

      post:
        description: Seach users by role assignments
        body:
          application/json:
            schema: !include schemas/search_users_by_role_expression.json
            example: !include examples/find_users_by_assigned_roles.json
        responses:
          200:
            description: Success
            body:
              application/json:
                example: !include examples/user_role_search_response.json
        is: [rate-limited]

  /rolegroups:
    /search:
      description: Search rolegroups by role assignments

      post:
        description: Search rolegroups by role assignments
        body:
          application/json:
            schema: !include schemas/search_rolegroups_by_role_expression.json
            example: !include examples/find_rolegroups_by_assigned_roles.json
        responses:
          200:
            description: Success
            body:
              application/json:
                type: roles.RoleGroupApiResponse
                example: !include examples/rolegroups_role_search_response.json
        is: [rate-limited]

  /teams:
    description: Teams by role

    /search:
      description: Search teams by role assignments

      post:
        description: Search teams by role assignments
        is: [
          pagination-collection: {
            example: !include examples/teams/teams_role_search_response.json,
            type: teams.TeamRoleSearchResult
          },
          rate-limited
        ]
        body:
          application/json:
            schema: !include schemas/search_teams_by_role_expression.json
            example: !include examples/find_teams_by_assigned_roles.json

/recover:
  description: recover user's account

  /username:
    post:
      description: sends email with list of usernames associated with the given email
      securedBy: [ null ]
      body:
        application/json:
          example: !include examples/recover-username.json
          schema: !include schemas/recover/recover-username.json
      responses:
        200:
          description: email was sent or no users are associated with the given email
        400:
          description: Bad request; missing email parameter
      is: [rate-limited]

  /password:
    post:
      description: sends a 'forgot password' email with password reset link to the email associated with the given username
      securedBy: [ null ]
      body:
        application/json:
          example: !include examples/recover-password.json
          schema: !include schemas/recover/recover-password.json
      responses:
        200:
          description: email was sent or user with username does not exist
          body:
            text/plain:
              example: OK
        400:
          description: Bad request; missing username parameter
      is: [rate-limited]

    /{recoverCode}:
      description: reset password
      uriParameters:
        recoverCode:
          description: A code sent in a password reset email used to prove the bearer has the right to change a user's password
          type: string

      get:
        description: Checks the validity of the password reset code
        securedBy: [ null ]
        responses:
          200:
            description: the code is valid
            body:
              text/plain:
                example: OK
          404:
            description: the code does not exist
        is: [rate-limited]

      post:
        description: Sets a new password for the user associated with the password reset code
        securedBy: [ null ]
        body:
          application/json:
            example: !include examples/change-password.json
            schema: !include schemas/recover/change-password.json
        responses:
          200:
            description: the password was successfully reset
            body:
              text/plain:
                example: OK
          400:
            description: any of the code, password or confirmPassword are missing or password and confirmPassword do not match
          404:
            description: the code does not exist
        is: [rate-limited]

/cs:
  /connectedApplications:
    get:
      description: |
       Search endpoint over all Connected Applications the caller might want to whitelist.
       Returns all public Connected Applications, as well as all applications in the caller's own organization.
       Does not return disabled applications.
       This API may change/disappear at any time without prior notification; there are no backwards compatibility guarantees for format, function or existence across multiple releases.
      queryParameters:
        client_id?:
          description: search for specific client_id
          type: array
          items:
            type: string
      is: [
        offset-paginated,
        searchable: {targetDesc: 'client id or client name'},
        pagination-collection: {
           example: !include examples/connected-applications/public-connected-applications.json,
           type: connectedApplications.PublicConnectedApplication
        },
        rate-limited
      ]

  /login/{domain}/metadata:
    get:
      description: |
        Get the metadata (isFederated, name) for the organization domain.
      responses:
        200:
          description: Success
          body:
            application/json:
              example: !include examples/domain-metadata.json
        404:
          description: Domain not found
      is: [rate-limited]

  /users/{userId}/rolegroups:
      get:
        description: |
          Get all the user rolegroup assignments the caller has permission to see
          This API may change/disappear at any time without prior notification; there are no backwards compatibility guarantees for format, function or existence across multiple releases.
        responses:
          200:
            description: Success
            body:
              application/json:
                type: roles.RoleGroupApiResponse
                example: !include examples/user-rolegroups-caller-may-see.json
        is: [rate-limited]


  /scopes:
    get:
      description: |
        Retrieve all scopes currently enabled in the platform.
        This API may change/disappear at any time without prior notification; there are no backwards compatibility guarantees for format, function or existence across multiple releases.
      responses:
        200:
          description: Success
          body:
            application/json:
              schema: !include schemas/connected-applications/scopes-x-api.json
              example: !include examples/connected-applications/scopes-x-api.json
      is: [rate-limited]

  /scopeAssignments:
    get:
      description: |
        Retrieve all eligible scope assignment contexts the caller has permission to assign to a client_credentials domain client.
        This API may change/disappear at any time without prior notification; there are no backwards compatibility guarantees for format, function or existence across multiple releases.
      responses:
        200:
          description: Success
          body:
            application/json:
              schema: !include schemas/connected-applications/scopes-assignments-x-api.json
              example: !include examples/connected-applications/scope-assignments-x-api.json
      is: [rate-limited]

  /conditionalAssignments:
    get:
      description: |
        Retrieve all elegible scope and role assignment contexts the caller has permission to assign to another identity,
        along with all platform data used to draw the UI for each product tab
        This API may change/disappear at any time without prior notification; there are no backwards compatibility guarantees for format, function or existence across multiple releases.
      queryParameters:
        intent?:
          description: |
            The caller's intent for how they will use the context data - whether for a role assignment, scope assignment, or scope delegation request
          enum: [role_assignment, scope_assignment, scope_request]
      responses:
        200:
          description: Success
          body:
            application/json:
              type: roles.ConditionalAssignments
              example: !include examples/conditional-assignments.json
      is: [rate-limited]

  /organizations/{orgId}:
    /administrators:
      description: |
        Experience API over an organization's administrators (teams & users)
        This API may change/disappear at any time without prior notification; there are no backwards compatibility guarantees for format, function or existence across multiple releases.

      get:
        description: |
          Experience API for getting a list of users that administer an organization
          This API may change/disappear at any time without prior notification; there are no backwards compatibility guarantees for format, function or existence across multiple releases.
        is: [
          searchable: { targetDesc: 'firstName, lastName, email or username of the user' },
          pagination-collection: {
            example: !include examples/rolegroup-users.json,
            type: users.UserAbbrevated
          },
          offset-paginated,
          rate-limited
        ]
        responses:
          200:
            description: Success
            body:
              application/json:
                example: !include examples/rolegroup-users.json

    /clientProviders:
      get:
        description: |
          Returns the list of client management belonging to the organization along with the details of number of environments using it.
        is: [
          offset-paginated,
          rate-limited
        ]
        queryParameters:
          provider_id?:
            description: |
              One or more ids of the provider(s) to return.
            type: array
            items:
              type: string
        responses:
          200:
            description: Success
            body:
              application/json:
                example: !include examples/clientManagementProviders/client-management-providers-xapi.json

      /{clientProviderId}:
        /environments:
          get:
            description: Returns the associated environments details.
            is: [
              offset-paginated,
              pagination-collection: {
                example: !include examples/clientManagementProviders/associated-environments.json,
                type: clientProviders.associatedEnvironments
              },
              rate-limited
            ]

    /connectedApplications/authorizations:
      description: |
        Permissions granted to connected applications by users within the organization.
        This API may change/disappear at any time without prior notification; there are no backwards compatibility guarantees for format, function or existence across multiple releases.
      get:
        description: |
          Returns all the authorizations that grant access to resources in the organization.
          If a user is specified, it will return the authorization_id of the (user, client) pairing.
          If a user is not specified, the count of the users that authorize the app will be returned.
          This API may change/disappear at any time without prior notification; there are no backwards compatibility guarantees for format, function or existence across multiple releases.
        queryParameters:
          user_id:
            description: Only return authorizations granted by that user
            required: false
            type: string
            example: "3f7eb03b-1e53-4dd7-8304-c7f52cef183d"
        is: [
          offset-paginated,
          rate-limited
        ]
        responses:
          200:
            description: Success
            body:
              application/json:
                examples:
                 rolled up by client: !include examples/connected-applications/experience-authorizations.json
                 for a single user: !include examples/connected-applications/experience-authorizations-for-user.json

    /connectedApplications:
      /{clientId}:
        delete:
          description: Deletes the ownerless connected App if the Org has composer entitlement
          is: [
            rate-limited
          ]
          responses:
            204:
              description: Connected Application was successfully deleted

    /externalAccess:
      delete:
        description: |
          Offboards the organization from external access
          This API will only be called by Platform Administrators
        is: [
          rate-limited
        ]
        responses:
          204:
            description: Success


      /domainTest:
        get:
          description: |
            Checks to see if the domain is a valid target to grant external access priviledges to
            This API may change/disappear at any time without prior notification; there are no backwards compatibility guarantees for format, function or existence across multiple releases.
          queryParameters:
            domain:
              description: A domain or lost of domains to check
              required: true
              type: array
              items:
                type: string
          is: [
            rate-limited
          ]
          responses:
            200:
              description: Success
              body:
                application/json:
                  example: !include examples/external-access/domain-test.json
                  type: externalAccess.DomainTestsResultArray
      /relations:
        get:
          description: |
            Returns all external access relations configured for the organization
            This API may change/disappear at any time without prior notification; there are no backwards compatibility guarantees for format, function or existence across multiple releases.
          is: [
            rate-limited
          ]
          responses:
            200:
              description: Success
              body:
                application/json:
                  example: !include examples/external-access/relations.json
                  type: externalAccess.OrganizationExternalAccessDetailedArray
        put:
          description: |
            Replaces the external access relations configured for the organization
            This API may change/disappear at any time without prior notification; there are no backwards compatibility guarantees for format, function or existence across multiple releases.
          is: [
            rate-limited
          ]
          body:
            application/json:
              type: externalAccess.OrganizationExternalAccessArray
          responses:
            204:
              description: Success
            400:
              description: Invalid relation

    /environments:
      get:
        description: |
          Returns the list of environments belonging to the organization along with the details of the suggested client management provider for those environment's
        is: [
          offset-paginated,
          rate-limited
        ]
        responses:
          200:
            description: Success
            body:
              application/json:
                example: !include examples/environments-with-suggested-cmp.json

  /organizations/{org}:
    /hubSpokeRelations:
      description: |
        API to initiate the linking process between the hub and spoke organizations. Initiated from the hub org.

      post:
        description: Invite spoke orgs to be linked with the hub Organization
        body:
          application/json:
            type: hubSpokeRelations.RelationsNew
            example: !include examples/hubSpokeRelations/Relation-new.json
        responses:
          200:
            description: Success
            body:
              application/json:
                type: hubSpokeRelations.RelationsList
                example: !include examples/hubSpokeRelations/Relations.json
          400:
            description: Bad Request
        is: [rate-limited]

      get:
        description: Show the existing hub spoke relations based on the status. Only accessible by hub admin
        queryParameters:
          status?:
            description: returns the relation invites based on the status.
            enum: [all, pending, rejected, accepted, unlinked]
        is: [
              offset-paginated,
              pagination-collection: {
                type: hubSpokeRelations.Relations,
                example: !include examples/hubSpokeRelations/Relations-paginated.json
              },
              sortable_3: { field_1: 'id', field_2: 'status', field_3: 'invited_at', default: 'invited_at' },
              rate-limited
            ]

        responses:
          400:
            description: Bad request; unknown organization, bad parameter or other failure

      /{hubSpokeRelationId}:
        description: Relation Invite resource
        uriParameters:
          hubSpokeRelationId:
            description: The ID of the hub Spoke Relation Invite
            type: primitives.IdString

        get:
          description: get the hubSpoke Relation invite
          responses:
            200:
              description: Success
              body:
                application/json:
                  type: hubSpokeRelations.Relations
                  example: !include examples/hubSpokeRelations/Relation.json
            400:
              description: Bad request; bad parameter or other failure
            404:
              description: No relation invite exists in this organization for the given hubSpokeRelationId
          is: [rate-limited]

        /reject:
          get:
            description: Reject the hub spoke relation invite. Only accessible by spoke admin
            is: [rate-limited]

            responses:
              200:
                description: Success
              400:
                description: Bad request; unknown organization, bad parameter or other failure
              404:
                description: No relation invite exists for the given hubSpokeRelationId

    /identities:
      description: |
        Experience API over an organization's identities (teams & users)
        This API may change/disappear at any time without prior notification; there are no backwards compatibility guarantees for format, function or existence across multiple releases.

      get:
        description: |
          Experience API for getting/searching over an organization's identities (users, teams, and organizations)
          This API may change/disappear at any time without prior notification; there are no backwards compatibility guarantees for format, function or existence across multiple releases.
        queryParameters:
          identity_type:
            description: type of identity to query by. Can be either 'user', 'team', or 'organization'
            type: array
            items:
              type: string
            required: false
          identity_id:
            description: One or more ids of the identities to return
            type: array
            items:
              type: string
            required: false
          include_membership_count:
            description: include membership counts on teams that are included in the response
            type: boolean
            required: false
            default: false
        is: [
          searchable: { targetDesc: 'firstName, lastName, email or username of a user, name of a team, or name or domain of an organization' },
          offset-paginated,
          pagination-collection: {
            example: !include examples/identities/identities.json,
            type: identities.IdentityWithDetailsAndMembershipCount
          },
          rate-limited
        ]
        responses:
          405:
            description: The organization is not a root organization

      /roles:
        post:
          description: |
            Experience API to update role assignments to identities (teams, users, external organizations) in bulk
            This API may change/disappear at any time without prior notification; there are no backwards compatibility guarantees for format, function or existence across multiple releases.

          body:
            application/json:
              type: identities.IdentitiesBulkRoleUpdateOperation
              example: !include examples/identities/bulk_role_assignments.json
          responses:
            204:
              description: Success
            400:
              description: One of the parameters (role_id, identity_id, context_params) is not valid for this organization
            405:
              description: The organization is not a root organization
          is: [rate-limited]

        /search:
          description: |
            Experience API to search for identities by role assignments
            This API may change/disappear at any time without prior notification; there are no backwards compatibility guarantees for format, function or existence across multiple releases.

          post:
            description: Search identities by role assignments
            is: [
              pagination-collection: {
                example: !include examples/identities/identities_role_search_response.json,
                type: identities.IdentityRoleSearchResult
              },
              rate-limited
            ]
            body:
              application/json:
                schema: !include schemas/search_identities_by_role_expression.json
                example: !include examples/find_identities_by_assigned_roles.json

    /identityProviders:
      description: |
        Experience API over an organization's Identity Providers
        This API may change/disappear at any time without prior notification; there are no backwards compatibility guarantees for format, function or existence across multiple releases.

      /names:
        get:
          description: |
            Experience API over an organization's Identity Providers's names
            This API may change/disappear at any time without prior notification; there are no backwards compatibility guarantees for format, function or existence across multiple releases.
          responses:
            200:
              description: Success
              body:
                application/json:
                  example: !include examples/identityManagementProviders/identity-management-provider-names.json
          is: [rate-limited]


    /rolegroups:
      description: |
        Experience API over an organization's rolegroups.
        This API may change/disappear at any time without prior notification; there are no backwards compatibility guarantees for format, function or existence across multiple releases.

      /delete_empty:
        delete:
          description: |
            Deletes all empty rolegroups associated with the organization.
            This API may change/disappear at any time without prior notification; there are no backwards compatibility guarantees for format, function or existence across multiple releases.
          is: [rate-limited]
          responses:
            204:
              description: Success

      /{roleGroupId}:
        description: |
          Experience API over a specific rolegroup
          This API may change/disappear at any time without prior notification; there are no backwards compatibility guarantees for format, function or existence across multiple releases.
        uriParameters:
          roleGroupId:
            description: The ID of the role group in GUID format
            type: string

        /migrate:
          post:
            description: |
              Migrates a specific rolegroup to a Team or Permission format. This process is irreversable.
              This API may change/disappear at any time without prior notification; there are no backwards compatibility guarantees for format, function or existence across multiple releases.
            is: [rate-limited]
            body:
              application/json:
                type: teamsExperienceApi.RolegroupMigrationRequest
                example: !include examples/teams/role-group-migration-request.json
            responses:
              200:
                description: Success. Data is returned when a new team is created.
                body:
                  application/json:
                    type: teamsExperienceApi.RolegroupMigrationResponse
              204:
                description: Success. No data is returned when rolegroups are converted to permissions or merged with an existing team.
              404:
                description: Team or rolegroup not found


    /users:
      /{userId}:
        /teams:
          description: |
            Experience API over user's teams
            This API may change/disappear at any time without prior notification; there are no backwards compatibility guarantees for format, function or existence across multiple releases.

          get:
            description: |
              Experience API for getting/searching over user's teams
              This API may change/disappear at any time without prior notification; there are no backwards compatibility guarantees for format, function or existence across multiple releases.
            queryParameters:
              ancestor_team_id?:
                description: team_id that must appear in the team's ancestor_team_ids.
                type: array
                items:
                  type: string
              parent_team_id?:
                description: team_id of the immediate parent of the team to return.
                type: array
                items:
                  type: string
              include_ancestors?:
                description: return ancestor teams for each result
                default: false
                type: boolean
              include_capabilities?:
                description: return the actions the caller is allowed to take over each team
                default: false
                type: boolean
              membership_type?:
                description: return only teams where the caller has a specific membership_type
                enum: [member, maintainer]
              team_id?:
                description: |
                  One or more ids of the team(s) to return. Type should be primitives.IdString but Osprey can't
                  handle custom types in query params
                type: array
                items:
                  type: string
            is: [
              searchable: { targetDesc: 'team name' },
              offset-paginated,
              pagination-collection: {
                example: !include examples/teams-experience-api/teams.json,
                type: teamsExperienceApi.TeamExtended
              },
              sortable_3: { field_1: 'team_name', field_2: 'created_at', field_3: 'team_id', default: 'team_name' },
              rate-limited
            ]

        /roles:
          description: |
            Experience API for getting all role assignments for a user, whether direct or inherited
            This API may change/disappear at any time without prior notification; there are no backwards compatibility guarantees for format, function or existence across multiple releases.

          get:
            description: |
              Experience API for getting all role assignments for a user, whether direct or inherited
              This API may change/disappear at any time without prior notification; there are no backwards compatibility guarantees for format, function or existence across multiple releases.
            queryParameters:
              envId?:
                description: environmentId to filter context by
                type: string
              orgId?:
                description: organizationId to filter context by
                type: string
            is: [
              offset-paginated,
              pagination-collection: {
                example: !include examples/teams-experience-api/role-assignments-by-context.json,
                type: teamsExperienceApi.RoleAssignmentsByContext
              },
              rate-limited
            ]


    /teamAddMemberOptions:
      get:
        description: |
          Experience API over all potential teams the caller may add members to
          This API may change/disappear at any time without prior notification; there are no backwards compatibility guarantees for format, function or existence across multiple releases.

        is: [
          searchable: { targetDesc: 'team name' },
          offset-paginated,
          pagination-collection: {
            example: !include examples/teams-experience-api/teams-abbreviated.json,
            type: teamsExperienceApi.TeamAbbreviated
          },
          rate-limited
        ]

    /teamNewParentOptions:
      get:
        description: |
          Experience API over the potential new parents of a team
          Either team_id or team_type must be provided
          This API may change/disappear at any time without prior notification; there are no backwards compatibility guarantees for format, function or existence across multiple releases.
        queryParameters:
          team_id?:
            description: id of the team whose new parent options shoud be returned
            type: string
          team_type?:
            description: type of the team whose new parent options should be returned
            type: string
        is: [
          searchable: { targetDesc: 'team name' },
          offset-paginated,
          pagination-collection: {
            example: !include examples/teams-experience-api/teams-abbreviated.json,
            type: teamsExperienceApi.TeamAbbreviated
          },
          rate-limited
        ]

    /teams:
      description: |
        Experience API over an organization's teams
        This API may change/disappear at any time without prior notification; there are no backwards compatibility guarantees for format, function or existence across multiple releases.

      get:
        description: |
          Experience API for getting/searching over an organization's teams
          This API may change/disappear at any time without prior notification; there are no backwards compatibility guarantees for format, function or existence across multiple releases.
        queryParameters:
          ancestor_team_id?:
            description: team_id that must appear in the team's ancestor_team_ids.
            type: array
            items:
              type: string
          parent_team_id?:
            description: team_id of the immediate parent of the team to return.
            type: array
            items:
              type: string
          include_ancestors?:
            description: return ancestor teams for each result
            default: false
            type: boolean
          include_capabilities?:
            description: return the actions the caller is allowed to take over each team
            default: false
            type: boolean
          membership_type?:
            description: return only teams where the caller has a specific membership_type. Use "none" to return teams where the user is not a member.
            enum: [member, maintainer, none]
          team_id?:
            description: |
              One or more ids of the team(s) to return. Type should be primitives.IdString but Osprey can't
              handle custom types in query params
            type: array
            items:
              type: string
        is: [
          searchable: { targetDesc: 'team name' },
          offset-paginated,
          pagination-collection: {
            example: !include examples/teams-experience-api/teams.json,
            type: teamsExperienceApi.TeamExtended
          },
          sortable_3: { field_1: 'team_name', field_2: 'created_at', field_3: 'team_id', default: 'team_name' },
          rate-limited
        ]

      /{teamId}:
        uriParameters:
          teamId:
            description: id of the team
            type: string

        get:
          description: |
            Experience API over an organization's team
            This API may change/disappear at any time without prior notification; there are no backwards compatibility guarantees for format, function or existence across multiple releases.

          queryParameters:
            include_ancestors?:
              description: return ancestor teams for each result
              default: false
              type: boolean
            include_capabilities?:
              description: return the actions the caller is allowed to take over each team
              default: false
              type: boolean
          responses:
            200:
              description: Success
              body:
                application/json:
                  type: teamsExperienceApi.TeamExtended
                  example: !include examples/teams-experience-api/team.json
          is: [rate-limited]

        /roles:
          get:
            description: |
              Experience API over roles assigned to a team. Returns results grouped by context.
              This API may change/disappear at any time without prior notification; there are no backwards compatibility guarantees for format, function or existence across multiple releases.

            is: [
              pagination-collection: {
                example: !include examples/teams-experience-api/role-assignments-by-context.json,
                type: teamsExperienceApi.RoleAssignmentsByContext
              },
              offset-paginated,
              rate-limited
            ]

  /resources:
    /authorize:
      description: Retrieve authorized resource(s) on behalf of an actor

      post:
        description: Specify resource(s) for an actor
        body:
          application/json:
            type: authorizeOnBehalf.AuthorizeResourcesTypes
            example: !include examples/authorized_resources_on_behalf.json
        responses:
          200:
            description: success
            body:
              application/json:
                example: !include examples/authorized_resources_on_behalf_response.json
                type: authorizeOnBehalf.AuthorizedResourcesResponseTypes
          400:
            description: bad request parameters
          401:
            description: Invalid credentials. Authentication failed!
          403:
            description: Forbidden. Caller does not have authorization to access this endpoint
          404:
            description: Actor does not exist
        is: [rate-limited]

    /connectedApplications:
      /authorization:
        description: Retrieve whether a given connected app is authorized by a user.

        get:
          description: Given a user_id and client_id (connected app), determine whether user has authorized the connected app.
          queryParameters:
            user_id:
              required: true
              type: string
              example: "3f7eb03b-1e53-4dd7-8304-c7f52cef183d"
            client_id:
              required: true
              type: string
              example: "d5e32198-7cc1-4c26-ab83-fd8912e16967"
          responses:
            200:
              description: success
              body:
                application/json:
                  example: !include examples/connected-applications/authorization.json
                  type: authorization.UserAuthorization

      /refreshTokens:
        description: Determine whether a refresh token is issued for a given user and a connected application.

        get:
          description: Given a user_id and client_id (Connected App), determine whether refresh token(s) are issued or not.
          queryParameters:
            user_id:
              required: true
              type: string
              example: "3f7eb03b-1e53-4dd7-8304-c7f52cef183d"
            client_id:
              required: true
              type: string
              example: "d5e32198-7cc1-4c26-ab83-fd8912e16967"
            as_id:
              required: true
              type: string
              example: "anypoint"
          responses:
            200:
              description: success
              body:
                application/json:
                  example: !include examples/connected-applications/refresh-tokens.json
                  type: refreshTokens.RefreshTokens

      /organizationGrants:
        description: Determine whether a organization's settings allow it to use a given connected application.

        get:
          description: Given org_id, as_id and grant type, determine if the organization's settings allow the connected application with grant type to use it.
          queryParameters:
            org_id:
              required: true
              type: string
              example: "f1040f73-8566-4638-9a5a-2447e604a318"
            as_id:
              required: true
              type: string
              example: "anypoint"
            grant:
              required: true
              type: string
              example: "client_credentials"
            client_id:
              required: true
              type: string
              example: "d5e32198-7cc1-4c26-ab83-fd8912e16967"
            scopes:
              required: true
              type: array
              items:
                type: string
          responses:
            200:
              description: Organization's settings allows given connected application to use it.
              body:
                application/json:
                  example: !include examples/connected-applications/validate-organization-settings-for-client.json
                  type: validateOrganizationSettingsForClient.validateOrganizationSettingsForClientResult

/oauth2:
  description: oauth 2 routes

  /introspect:
    description: Look up caller information from an access token

    post:
      description: |
        Look up caller information from an access token
        This implements RFC-7662: OAuth 2.0 Token Introspection
      body:
        application/json:
          schema: !include schemas/introspect.json
          example: !include examples/introspect-query.json
        application/x-www-form-urlencoded:
          type: object
          properties:
            token: string
            token_type_hint?: string
      responses:
        200:
          description: success
          body:
            application/json:
              example: !include examples/introspect-response.json
              type: object
      is: [rate-limited]

/support:
  description: Support portal

  get:
    description: Redirect to the support portal or the getting help documentation
    responses:
      302:
        description: Location header contains the link to sso into the support portal, the link to the getting help documentation or (if not signed in) the signin page
      500:
        description: Support portal not available or an unknown error occurred
    is: [rate-limited]

/organizations:
  /{orgId}:
    /clients/search:
      post:
        description: Search clients
        body:
          application/json:
            type: clients.OrgClientsSearch
            example: !include examples/client_search.json
        responses:
          200:
            description: Success
            body:
              application/json:
                example: !include examples/clients.json
        is: [rate-limited]

    /connectedApplications:
      description: |
        An organization's connected application authorizations.
        Authorizations are shared between all business groups.
        Modifications are only allowed on the master organization.

      /authorizations:
        description: Permissions granted to connected applications by users within the organization
        get:
          description: |
            Returns all the authorizations that grant access to resources in the organization.
          queryParameters:
            user_id:
              description: Only return authorizations granted by that user
              required: false
              type: string
              example: "3f7eb03b-1e53-4dd7-8304-c7f52cef183d"
          is: [
            offset-paginated,
            pagination-collection: {
              example: !include examples/connected-applications/authorizations.json,
              type: authorization.UserAuthorization
            },
            rate-limited
          ]

        delete:
          description: Revoke all authorizations that grant rights to accessing resources in the business group. Only available on the master organization.
          queryParameters:
            user_id:
              description: Only delete authorizations granted by that user
              required: true
              type: string
              example: "3f7eb03b-1e53-4dd7-8304-c7f52cef183d"
          responses:
            204:
              description: Success
            405:
              description: The organization is a business group. Revoking must be done from a master organization
          is: [rate-limited]

        /{authorizationId}:
          uriParameters:
            authorizationId:
              description: The ID of the authorization
              type: string

          get:
            description: Returns a single authorization
            responses:
              200:
                description: Success
                body:
                  application/json:
                    type:  authorization.UserAuthorization
                    example: !include examples/connected-applications/authorization.json
            is: [rate-limited]
          delete:
            description: Revokes an authorization. Only available on the master organization.
            responses:
              204:
                description: Success
              405:
                description: The organization is a business group. Revoking must be done from a master organization
            is: [rate-limited]

      /settings:
        get:
          description: Returns the organization's Connected Application settings. For business groups, this will return the master organization's settings.
          responses:
            200:
              description: Success
              body:
                application/json:
                  example: !include examples/connected-applications/settings.json
                  type:  connectedApplications.ConnectedApplicationSettings
            404:
              description: The organization does not exist
          is: [rate-limited]

        patch:
          description: Updates the organization's connected application settings
          body:
            application/json:
              example: !include examples/connected-applications/settings-update.json
              type:  connectedApplications.ConnectedApplicationSettingsUpdate
          responses:
            200:
              description: Success
              body:
                application/json:
                  example: !include examples/connected-applications/settings.json
                  type:  connectedApplications.ConnectedApplicationSettings
            404:
              description: The organization does not exist
            405:
              description: The organization is a business group. Settings are only editable on a master organization
          is: [rate-limited]

      /whitelist:
        get:
          description: Returns the entries on the organization's Connected Application whitelist
          is: [
            offset-paginated,
            pagination-collection: {
              example: !include examples/connected-applications/whitelist.json,
              type: connectedApplications.ConnectedApplicationSettingsWhitelistEntry
            },
            rate-limited
          ]
          queryParameters:
            client_id?:
              description: search for whitelist entries by specific client_id
              type: array
              items:
                type: string
          responses:
            404:
              description: The organization does not exist

        put:
          description: Replaces the organization's Connected Application whitelist with a new one
          body:
            application/json:
              example: !include examples/connected-applications/whitelist-update.json
              type: connectedApplications.ConnectedApplicationSettingsWhitelist
          responses:
            204:
              description: Success
            404:
              description: The organization does not exist
            405:
              description: The organization is a business group. The whitelist is only editable on a master organization.
          is: [rate-limited]

        patch:
          description: Inserts the entries into the organization's Connected Application whitelist
          body:
            application/json:
              example: !include examples/connected-applications/whitelist-update.json
              type: connectedApplications.ConnectedApplicationSettingsWhitelist
          responses:
            204:
              description: Success
            404:
              description: The organization does not exist
            405:
              description: The organization is a business group. The whitelist is only editable on a master organization.
          is: [rate-limited]

        delete:
          description: Deletes the entries from the organization's Connected Application whitelist
          body:
            application/json:
              example: !include examples/connected-applications/whitelist-delete.json
              type: connectedApplications.ConnectedApplicationSettingsWhitelist
          responses:
            204:
              description: Success
            404:
              description: The organization does not exist
            405:
              description: The organization is a business group. The whitelist is only editable on a master organization
          is: [rate-limited]

    /environments/{environmentId}:
      /clientManagementProviders:
        get:
          description: Retrieves client management providers for the environment
          responses:
            200:
              description: returns client management providerIds for the environment
              body:
                application/json:
                  example: !include examples/environment-clientManagementProviders.json
            404:
              description: No environment exists with that id
          is: [rate-limited]

        put:
          description: Upsert client providers for the environment
          body:
            application/json:
              type: clientProviders.EnvironmentClientProviders
              example: !include examples/environment-clientManagementProviders.json
          responses:
            200:
              description: returns client management providerIds for the environment
              body:
                application/json:
                  example: !include examples/environment-clientManagementProviders.json
            404:
              description: No environment exists with that id
          is: [rate-limited]

    /clientProviders:
      get:
        description: Returns list of client management providers for the master organization with a subset of values (providerId, organizationId, name, type (name, description, version))
        queryParameters:
          provider_id?:
            description: |
              One or more ids of the provider(s) to return.
            type: array
            items:
              type: string
          cp_type?:
            description: |
              One or more types of provider(s) to return.
            type: array
            items:
              type: string
        is: [
          searchable: { targetDesc: 'name' },
          offset-paginated,
          pagination-collection: {
            example: !include examples/clientManagementProviders/client-management-providers.json,
            type: clientProviders.ExternalClientProvidersFind
          },
          sortable_2: {field_1: 'provider_id', field_2: 'name', default: 'provider_id'},
          rate-limited
        ]

      post:
        description: Adds a new client management provider for the organization. This can be called only on Master Organizations
        body:
          application/json:
            type: clientProviders.ExternalClientProvider
            example: !include examples/clientManagementProviders/client-management-provider.json
        responses:
          201:
            description: Success
          400:
            description: Invalid data in body
          401:
            description: Unauthorized
          404:
            description: Organization does not exist
          405:
            description: The organization is not a root organization
        is: [rate-limited]

      /{clientProviderId}:
        get:
          description: Returns the associated client management provider config for the master organization and a subset of values (providerId, organizationId, name, type (name, description, version)) for Business Groups
          queryParameters:
            includeSecrets:
              description: flag to include the secrets as part of the response or not
              type: boolean
              default: false
          responses:
            200:
              description: Success
              body:
                application/json:
                  type: clientProviders.ExternalClientProvider
                  example: !include examples/clientManagementProviders/client-management-provider-get.json
            401:
              description: Unauthorized
            404:
              description: Client Provider ID does not exist in the Organization
          is: [rate-limited]

        put:
          description: Replaces the associated client management provider config
          body:
            application/json:
              type: clientProviders.ExternalClientProvider
              example: !include examples/clientManagementProviders/client-management-provider.json
          responses:
            200:
              description: Success
            400:
              description: Invalid data in body
            401:
              description: Unauthorized
            404:
              description: Client Provider ID does not exist in the Organization
            405:
              description: The organization is not a root organization
          is: [rate-limited]

        patch:
          description: Updates the associated client management provider config
          queryParameters:
            recreateTokenValidationClient:
              description: flag to indicate whether to recreate token validation client on update or not
              type: boolean
              default: false
          body:
            application/json:
              type: clientProviders.ExternalClientProviderOptional
              example: !include examples/clientManagementProviders/client-management-provider-patch.json
          responses:
            200:
              description: Success
            400:
              description: Invalid data in body
            401:
              description: Unauthorized
            404:
              description: Client Provider ID does not exist in the Organization
            405:
              description: The organization is not a root organization
          is: [rate-limited]

        delete:
          description: Deletes the associated client management provider
          responses:
            204:
              description: Success
            401:
              description: Unauthorized
            404:
              description: Client Provider ID does not exist in the Organization
            405:
              description: The organization is not a root organization
          is: [rate-limited]

        /grantTypes:
          get:
            description: Returns the associated client management provider type and grant types it suppports.
            responses:
              200:
                description: Success
                body:
                  application/json:
                    type: clientProviders.clientProvidersTypeAndGrantTypes
                    example: !include examples/clientManagementProviders/client-management-provider-get-grant-types.json
            is: [rate-limited]

        /clients:
          get:
            description: Returns the clients created using this specific Client Management Provider
            queryParameters:
              client_id?:
                description: |
                  One or more ids of the client(s) to return.
                type: array
                items:
                  type: string
            is: [
              offset-paginated,
              searchable: { targetDesc: 'client_name' },
              sortable_2: { field_1: 'client_id', field_2: 'client_name', default: 'client_id' },
              rate-limited
            ]
            responses:
              200:
                description: Sucess
                body:
                  application/json:
                    example: !include examples/clientProviderClients/clients.json
              401:
                description: Unauthorized
              404:
                description: Organization or Client Management Provider does not exist

          post:
            description: Adds a new client using the Client Management Provider
            body:
              application/json:
                type: clients.ClientProviderClient
                example: !include examples/clientProviderClients/client-upsert.json
            responses:
              201:
                description: Success
              400:
                description: Invalid data in body
              401:
                description: Unauthorized
              404:
                description: Organization or Client Management Provider does not exist
              405:
                description: The organization is not a root organization
            is: [rate-limited]

          /{clientId}:
            get:
              description: Returns the associated clients info
              responses:
                200:
                  description: Success
                  body:
                    application/json:
                      example: !include examples/clientProviderClients/client.json
                401:
                  description: Unauthorized
                404:
                  description: ClientId does not exist in the Organization or Client Management Provider
              is: [rate-limited]

            patch:
              description: Updates the associated client
              queryParameters:
                resetSecret?:
                  description: Asks service to reset secret as part of this operation
                  type: boolean
                  default: false
              body:
                application/json:
                  type: clients.ClientProviderClient
                  example: !include examples/clientProviderClients/client-upsert.json
              responses:
                200:
                  description: Success
                400:
                  description: Invalid data in body
                401:
                  description: Unauthorized
                404:
                  description: ClientId does not exist in the Organization or Client Management Provider
                405:
                  description: The organization is not a root organization
              is: [rate-limited]

            delete:
              description: Deletes the associated client
              responses:
                204:
                  description: Success
                401:
                  description: Unauthorized
                404:
                  description: ClientId does not exist in the Organization or Client Management Provider
                405:
                  description: The organization is not a root organization
              is: [rate-limited]

    /identityProviders:
      get:
        description: Returns list of identity management providers for the master organization with a subset of values.
        queryParameters:
          provider_id:
            description: |
              One or more ids of the provider(s) to return.
            type: array
            items:
              type: string
            required: false
          idp_type:
            description: |
              One or more types of provider(s) to return.
            type: array
            items:
              enum: [saml, openid, ldap]
            required: false
          include_full_details:
            description: |
              If true, returns the full set of properties
            type: boolean
            default: false
        is: [
          searchable: { targetDesc: 'name' },
          offset-paginated,
          pagination-collection: {
            example: !include examples/identityManagementProviders/identity-management-providers.json,
            type: identityProviders.ExternalIdentityProvidersFind
          },
          sortable_2: {field_1: 'provider_id', field_2: 'name', default: 'provider_id'},
          rate-limited
        ]
        responses:
          200:
            description: Returns the list of identity management providers
          405:
            description: The organization is not a root organization

      post:
        description: Add a new identity management provider to the master organization.
        body:
          application/json:
            type: identityProviders.ExternalIdentityProvider
            example: !include examples/identityManagementProviders/identity-management-provider.json
        responses:
          201:
            description: Success
          400:
            description: Invalid data in body
          405:
            description: Cannot add identity providers to business groups
        is: [rate-limited]

      /saml-sp-metadata:
        get:
          description: Download the SAML SP metadata of the associated SAML identity management provider
          queryParameters:
            provider_id:
              description: |
                ID of the provider to get the associated SAML SP metadata.
              type: string
              required: true
          responses:
            200:
              description: Success
              body:
                application/samlmetadata+xml:
                  example: !include examples/saml_sp_metadata.xml
            405:
              description: The organization is not a root organization
          is: [rate-limited]

      /ldap-test:
        post:
          description: Test the LDAP config before saving the configuration
          queryParameters:
            provider_id:
              description: |
                ID of the provider to get the associated LDAP config that's already persisted
              type: string
              required: false
          body:
            application/json:
              type: identityProviders.LDAPProviderTest
              example: !include examples/identityManagementProviders/ldap-provider-test.json
          responses:
            200:
              description: Success
            400:
              description: Invalid data in body
            405:
              description: The organization is not a root organization
          is: [rate-limited]

      /{identityProviderId}:
        get:
          description: Returns the associated identity management provider config.
          queryParameters:
            include_secrets:
              description: If true, include secrets in the response
              type: boolean
              default: false
          responses:
            200:
              description: Success
              body:
                application/json:
                  type: identityProviders.ExternalIdentityProviderGet
                  example: !include examples/identityManagementProviders/identity-management-provider-get.json
            405:
              description: The organization is not a root organization
          is: [rate-limited]

        patch:
          description: Updates the associated identity management provider config
          body:
            application/json:
              type: identityProviders.ExternalIdentityProviderPatch
              example: !include examples/identityManagementProviders/identity-management-provider-patch.json
          responses:
            200:
              description: Success
            400:
              description: Invalid data in body
            405:
              description: The organization is not a root organization
          is: [rate-limited]

        delete:
          description: Deletes the associated identity management provider
          responses:
            204:
              description: Success
            405:
              description: The organization is not a root organization
          is: [rate-limited]

        /saml-sp-keys:
          get:
            description: Returns the list of SAML SP keys associated to the identity management provider config
            queryParameters:
              primary?:
                description: If true, return only the primary SAML SP key
                type: boolean
                default: false
            responses:
              200:
                description: Success
                body:
                  application/json:
                    type: identityProviders.SAMLProviderKeysArray
                    example: !include examples/identityManagementProviders/identity-management-provider-saml-sp-keys-get-response.json
              404:
                description: The identity provider does not exist or is not a SAML provider
              405:
                description: The organization is not a root organization
            is: [rate-limited]

          post:
            description: Add or generate a new SAML SP key pair
            body:
              application/json:
                description: Key pair to add, or an empty body to generate a new key pair
                type: identityProviders.SAMLProviderKeysPost
                examples:
                  add_key:
                    !include examples/identityManagementProviders/identity-management-provider-saml-sp-keys-post-request.json
                  generate_key: |
                    {}
            responses:
              201:
                description: Success
                body:
                  application/json:
                    type: identityProviders.SAMLProviderKeys
                    example: !include examples/identityManagementProviders/identity-management-provider-saml-sp-keys-post-response.json
              404:
                description: The identity provider does not exist or is not a SAML provider
              405:
                description: The organization is not a root organization
            is: [rate-limited]

          /{samlSpKeyId}:
            get:
              description: Returns the SAML SP certificate in .pem format
              responses:
                200:
                  description: Success
                  body:
                    binary/octet-stream:
                      example: !include examples/identityManagementProviders/exampleCert.pem
                404:
                  description: The key or identity provider does not exist, or it is not a SAML provider
                405:
                  description: The organization is not a root organization
              is: [rate-limited]

            delete:
              description: Delete the SAML SP key
              responses:
                204:
                  description: Success
                404:
                  description: The key or identity provider does not exist, or it is not a SAML provider
                405:
                  description: The organization is not a root organization
              is: [rate-limited]

            /setPrimary:
              post:
                description: Make the key the primary SAML SP key for the identity management provider config
                responses:
                  200:
                    description: Success
                    body:
                      application/json:
                        type: identityProviders.SAMLProviderKeysArray
                        example: !include examples/identityManagementProviders/identity-management-provider-saml-sp-keys-get-response.json
                  404:
                    description: The key or identity provider does not exist, or it is not a SAML provider
                  405:
                    description: The organization is not a root organization
                is: [rate-limited]

    /identityProviderSettings:
      get:
        description: Get the identity provider settings for the org
        responses:
          200:
            description: Success
            body:
              application/json:
                type: identityProviders.IdentityProviderSettings
                example: !include examples/identityManagementProviders/identity-management-provider-settings.json
          405:
            description: The organization is not a root organization

      patch:
        description: Update the identity provider settings for the org
        body:
          application/json:
            type: identityProviders.IdentityProviderSettings
            example: !include examples/identityManagementProviders/identity-management-provider-settings.json
        responses:
          204:
            description: Success
          400:
            description: Invalid data in body
          405:
            description: The organization is not a root organization

    /invites:
      description: Invite people to join the organization

      get:
        description: get outstanding or expired invites that match the criteria
        is: [
          offset-paginated,
          pagination-collection: {
            type: invites.Invite,
            example: !include examples/invites-paginated.json
          },
          searchable: {targetDesc: 'invited emails'},
          rate-limited
        ]

        responses:
          400:
            description: Bad request; unknown organization, bad parameter or other failure

      post:
        description: Invite a person to join the organization
        body:
          application/json:
            type: invites.InviteNewList
            examples:
              teams: !include examples/invite-new.json
              roles: !include examples/invite-roles.json
        responses:
          200:
            description: Success
            body:
              application/json:
                type: invites.InviteList
                example: !include examples/invites.json
          400:
            description: Bad request; unknown organization, bad parameter or other failure
        is: [rate-limited]

      delete:
        description: Invite a person to join your organization
        body:
          application/json:
            type: invites.InvitesIds
            example: !include examples/invite-ids-array.json
        responses:
          204:
            description: Success
          400:
            description: Bad request; unknown organization, bad parameter or no invite was deleted
        is: [rate-limited]

      /{inviteId}:
        description: Invite resource
        uriParameters:
          inviteId:
            description: The ID of the invite
            type: integer

        get:
          description: get an invite
          responses:
            200:
              description: Success
              body:
                application/json:
                  type: invites.Invite
                  example: !include examples/invite.json
            400:
              description: Bad request; bad parameter or other failure
            404:
              description: No invite exists in this organization for the given inviteId
          is: [rate-limited]

      /resend:
        description: Resend invites

        post:
          description: Resend a list of invites
          body:
            application/json:
              type: invites.InvitesIds
              example: !include examples/invite-ids-array.json
          responses:
            200:
              description: Success
              body:
                application/json:
                  type: invites.InvitesResendResponse
                  example: !include examples/invites-resend-response.json
            400:
              description: One or more of the invites are not in the organization or no invites were sent
          is: [rate-limited]

    /provider:
      /users:
        description: Identity provider information for the organization

        get:
          description: Returns the identity provider details
          responses:
            200:
              description: Success
              body:
                application/json:
                  example: !include examples/identityManagementProviders/identity-management-provider-old.json
          is: [rate-limited]

        put:
          description: Updates the identity provider for the organization
          body:
            application/json:
              type: identityProviders.ExternalIdentityProviderLegacy
              example: !include examples/identityManagementProviders/identity-management-provider-old.json
          responses:
            200:
              description: Success
          is: [rate-limited]

        delete:
          description: Revert to using the default identity provider
          responses:
            200:
              description: Success
          is: [rate-limited]

        /saml-sp-metadata:
          get:
            description: Download the SAML SP metadata
            responses:
              200:
                description: Success
                body:
                  application/samlmetadata+xml:
                    example: !include examples/saml_sp_metadata.xml
            is: [rate-limited]

        /ldap/test:
          post:
            description: To test the ldap identity provider configuration before persisting
            body:
              application/json:
                type: identityProviders.LDAPProviderTestOld
            responses:
              200:
                description: Success
            is: [rate-limited]

    /teams:
      description: Teams are groups of users and/or other teams

      get:
        description: Returns all teams or search for teams or get a list of teams by ids
        queryParameters:
          ancestor_team_id?:
            description: team_id that must appear in the team's ancestor_team_ids.
            type: array
            items:
              type: string
          parent_team_id?:
            description: team_id of the immediate parent of the team to return.
            type: array
            items:
              type: string
          team_id?:
            description: |
              One or more ids of the team(s) to return. Type should be primitives.IdString but Osprey can't
              handle custom types in query params
            type: array
            items:
              type: string
          team_type?:
            description: |
              One or more types of team(s) to return. Type should be teams.TeamType but Osprey can't
              handle custom types in query params
            type: array
            items:
              type: string
        is: [
          searchable: { targetDesc: 'team name' },
          offset-paginated,
          pagination-collection: {
            example: !include examples/teams/teams.json,
            type: teams.Team
          },
          sortable_3: { field_1: 'team_name', field_2: 'created_at', field_3: 'team_id', default: 'team_name' },
          rate-limited
        ]

      post:
        description: Creates a new team.
        body:
          application/json:
            type: teams.TeamCreate
            example: !include examples/teams/team-create.json
        responses:
          201:
            description: Success
            body:
              application/json:
                type: teams.Team
                example: !include examples/teams/team.json
          409:
            description: No team for the parent_team_id or the type of the parent_team_id is incompatible with this team's type.
        is: [rate-limited]

      /{teamId}:
        uriParameters:
          teamId:
            description: id of the team
            type: primitives.IdString

        get:
          description: Returns the team
          responses:
            200:
              description: Success
              body:
                application/json:
                  type: teams.Team
                  example: !include examples/teams/team.json
          is: [rate-limited]

        patch:
          description: Update or move the team
          body:
            application/json:
              type: teams.TeamUpdate
              example: !include examples/teams/team-update.json
          responses:
            201:
              description: Success
              body:
                application/json:
                  type: teams.Team
                  example: !include examples/teams/team.json
            401:
              description: Not Authorized to either update the properties on the team.
            409:
              description: |
                If changing the name and the new name is already used by other team in the organization.
                If changing the type and the new type is incompatible with the parent's or a child's type.
          is: [rate-limited]

        delete:
          description: Delete the team, including all child teams.
          responses:
            204:
              description: Success.
          is: [rate-limited]

        /parent:
          put:
            description: Move the team and its child teams under a new parent team
            body:
              application/json:
                type: teams.TeamMove
                example: !include examples/teams/team-move.json
            responses:
              201:
                description: Success
                body:
                  application/json:
                    type: teams.Team
                    example: !include examples/teams/team.json
              401:
                description: Not Authorized to move the team or move the team under the new parent_team_id
              409:
                description: If no team exists for the parent_team_id or the type of the parent_team_id is incompatible with this team's type.
            is: [rate-limited]

        /groupmappings:
          description: |
            group access mappings configure how memberships in external groups
            relate to memberships in teams

          get:
            description: get all group access mappings configured for the team
            queryParameters:
              membership_type?:
                description: Include the group access mappings that grant the provided membership type
                  By default, all group access mappings are returned
                type: array
                items:
                  type: string
                  enum: ['member', 'maintainer']
                required: false
              provider_id?:
                description: Include the group access mappings that are mapped to the provided IdP
                  By default, all group access mappings are returned
                type: primitives.uuid | primitives.uuid[]
                required: false
            is: [
              searchable: { targetDesc: 'external group name' },
              offset-paginated,
              pagination-collection: {
                example: !include examples/teams/team-mappings-collection.json,
                type: teams.TeamExternalGroupMapping
              },
              rate-limited
            ]

          put:
            description: Replace the entire list of group mappings associated with this team
            body:
              application/json:
                type: teams.TeamExternalGroupMappingList
                example: !include examples/teams/team-mappings.json
            responses:
              204:
                description: Success
            is: [rate-limited]

          patch:
            description: bulk add mappings and/or modify mappings' membership_type to the team. Removing mappings is not supported by this method.
            body:
              application/json:
                type: teams.TeamExternalGroupMappingList
                example: !include examples/teams/team-mappings.json
            responses:
              204:
                description: Success
            is: [rate-limited]

          delete:
            description: bulk remove mappings from the team
            body:
              application/json:
                type: teams.TeamExternalGroupMappingList
                example: !include examples/teams/team-mappings.json
            responses:
              204:
                description: Success.
            is: [rate-limited]

        /roles:
          description: roles assigned to the team. All members of the team receive these access control grants.

          get:
            description: get all role assignments or search for role assignments
            queryParameters:
              role_id:
                type: array
                items:
                  type: string
                description: return only role assignments containing one of the supplied role_ids
                required: false
            is: [
              searchable: { targetDesc: 'role name' },
              pagination-collection: {
                example: !include examples/roles/role-assignments-response.json,
                type: roles.RoleAssignmentDetailed
              },
              offset-paginated,
              rate-limited
            ]

          post:
            description: bulk assign roles to the team
            body:
              application/json:
                type: roles.RoleAssignmentCollectionRequest
                example: !include examples/roles/role-assignments-request.json
            responses:
              204:
                description: Success
              400:
                description: Invalid role_id or context_parameters.
            is: [rate-limited]

          delete:
            description: bulk unassign roles from the team
            body:
              application/json:
                type: roles.RoleAssignmentCollectionRequest
                example: !include examples/roles/role-assignments-request.json
            responses:
              204:
                description: Success
              400:
                description: Invalid role_id or context_parameters.
            is: [rate-limited]

        /members:
          description: members of teams can be users or other teams

          get:
            description: get all members or search for members of this team or get a list of members by ids
            queryParameters:
              membership_type:
                description: |
                  Include the members of the team that have this membership_type.
                  By default, all types of members are returned.
                type: array
                items:
                  type: string
                required: false
              identity_type:
                description: |
                  Include the members of the team that have this type.
                  By default, all types of members are returned.
                type: array
                items:
                  type: string
                required: false
              member_ids:
                description: Include the members of the team that have ids in this list
                required: false
                type: array
                items:
                  type: string
              displayUserDetails:
                description: If true, include additional user fields. Only compatible with the user identity_type
                required: false
                type: boolean
                default: false
            is: [
              searchable: { targetDesc: 'member name' },
              offset-paginated,
              pagination-collection: {
                example: !include examples/teams/team-members.json,
                type: teams.TeamMember
              },
              sortable_2: { field_1: 'identity_type', field_2: 'name', default: 'identity_type' },
              rate-limited
            ]

          patch:
            description: bulk add users and/or modify users' membership_type to the team. Removing members is not supported by this method.
            body:
              application/json:
                type: teams.TeamMemberBulkAdd
                example: !include examples/teams/team-members-bulk-add.json
            responses:
              204:
                description: Success
              400:
                description: Returned if any member id is for a team. Use the endpoints directly on the team to move it or delete it.
            is: [rate-limited]

          delete:
            description: bulk remove user members from the team
            body:
              application/json:
                type: teams.TeamMemberIdArray
                example: !include examples/array-of-strings.json
            responses:
              204:
                description: Success.
              400:
                description: Returned if any member id is for a team. Use the endpoints directly on the team to move it or delete it.
            is: [rate-limited]

          /{userId}:
            uriParameters:
              userId:
                description: user id
                type: primitives.IdString

            put:
              description: add the user as a member of the team.
              body:
                application/json:
                  type: teams.TeamMemberAdd
                  example: !include examples/teams/team-member-add.json
              responses:
                204:
                  description: Success.
                405:
                  description: Returned if the member id is for a team. Use the endpoints directly on the team to move it or delete it.
              is: [rate-limited]

            delete:
              description: remove the user from the team.
              responses:
                204:
                  description: Success.
                405:
                  description: Returned if the member id is for a team. Use the endpoints directly on the team to move it or delete it.
              is: [rate-limited]

    /users:
      /{userId}:
        /teams:
          get:
            description: Returns a list of teams the user is a member of
            queryParameters:
              ancestor_team_id?:
                description: team_id that must appear in the team's ancestor_team_ids.
                type: array
                items:
                  type: string
              parent_team_id?:
                description: team_id of the immediate parent of the team to return.
                type: array
                items:
                  type: string
              team_type:
                type: array
                items:
                  type: string
                description: return only teams that are of this type
                required: false
              membership_type:
                type: array
                items:
                  type: string
                description: return only teams where the user is this type of member
                required: false
            is: [
              searchable: { targetDesc: 'team name' },
              offset-paginated,
              pagination-collection: {
                example: !include examples/teams/team-collection-with-membership.json,
                type: teams.TeamIsMemberOf
              },
              sortable_3: { field_1: 'team_name', field_2: 'created_at', field_3: 'team_id', default: 'team_name' },
              rate-limited
            ]
        /identityProviders:
          get:
            description: Returns the list of IdP's associated with the user
            responses:
              200:
                body:
                  application/json:
                    example: !include examples/identityManagementProviders/associated-identity-management-providers.json
              405:
                description: The organization is not a root organization
            is: [rate-limited]
          post:
            description: Associate an IdP with the user.
            body:
              application/json:
                type: identityProviders.AssociateIdentityProvider
                example: !include examples/identityManagementProviders/associate-identity-management-provider.json
            responses:
              201:
                description: Success
              400:
                description: Invalid data in body
              405:
                description: The organization is not a root organization
            is: [rate-limited]

          /{identityProviderId}:
            uriParameters:
              identityProviderId:
                description: Identity Provider id
                type: primitives.uuid

            delete:
              description: Disassociate an IdP already associated with the user
              responses:
                204:
                  description: Success
                405:
                  description: The organization is not a root organization
              is: [rate-limited]

    /proxyusers/{userId}:
      description: Creates a proxy user in an organization

      post:
        description: Creates a proxy user in an organization
        responses:
          201:
            description: Success
            body:
              application/json:
                example: !include examples/proxyUsers/proxy-user.json
        is: [rate-limited]

/v2:
  /cs:
    description: |
      API specific to Core Services's UI.
      This API may change/disappear at any time without prior notification; there are no backwards compatibility guarantees for format, function or existence across multiple releases.

    get:
      description: |
        Retrieves Anypoint product suite data & user/org/permission information about the caller.
        This API may change/disappear at any time without prior notification; there are no backwards compatibility guarantees for format, function or existence across multiple releases.
      responses:
        200:
          description: Success
          body:
            example: !include examples/bootstrap_data_v2.json


  /organizations:
    description: Organizations
    /{orgId}:
      description: A single organization
      uriParameters:
        orgId:
          description: The id of the organization
          type: string
      get:
        queryParameters:
          include?:
            type: string | array
            description: attributes to include as part of response
        responses:
          200:
            body:
              type: Organization
        is: [rate-limited]
      delete:
        queryParameters:
          force?:
            type: boolean
            default: false
            description: If true, safety validations should be ignored
        responses:
          204:
            description: Success
        is: [rate-limited]
      /entitlements:
        get:
          responses:
            200:
              description: Return entitlements for this organization
              body:
                application/json:
                  example: !include examples/entitlements_v2.json
                  type: object
        put:
          description: Sets one or more values for entitlements
          body:
            application/json:
              example: !include examples/entitlements_v2.json
              type: Entitlements
          responses:
            200:
              description: Entitlement has been modified
              body:
                application/json:
                  example: !include examples/entitlements_v2.json
                  type: object
            404:
              description: Resource does not exist
          is: [rate-limited]

        /{entitlementName}:
          uriParameters:
            entitlementName:
              type: string
              description: The name of the entitlement
          get:
            description: Returns the name and value of the specified entitlement
            responses:
              200:
                description: Returns entitlement
                body:
                  application/json:
                    example: !include examples/entitlements-new_v2.json
                    type: object
              404:
                description: Resource does not exists
            is: [rate-limited]
      /environments:
        /{environmentId}:
          delete:
            description: Delete an environment
            responses:
              204:
                description: Successful. Returns zero length body
            is: [rate-limited]

  /oauth2:
    # All validation / error handling is done by OAuth2orize
    /authorize:
      get:
        description: Starts an OAuth2 authorization flow; allows the logged-in user to authorize 3rd-party access to their data
        queryParameters:
          client_id:
            description: The ID of the application attempting to be authorized
            required: false
            type: string
            example: "3f7eb03b-1e53-4dd7-8304-c7f52cef183d"
          scope:
            description: Space-delimited list of scopes the client is requesting
            required: false
            type: string
            example: "openid api:admin"
          state:
            description: a parameter with a string that will be supplied in a redirect back to the application upon success
            required: false
            type: string
          redirect_uri:
            description: Redirect uri for the application's authorization callback
            required: false
            type: string
          response_type:
            description: describes the type of object that the application wishes to receive upon success
            required: false
            type: string
          nonce:
            description: value used to mitigate replay attacks
            required: false
            type: string
        responses:
          302:
            description: |
              Redirects the user agent to the application's callback URI if the application is already authorized
              Redirects the user agent to the consent screen otherwise
          400:
            description: Bad request; an invalid redirect_uri, response_type or client_id
        is: [rate-limited]
      post:
        description: Starts an OAuth2 authorization flow; allows the logged-in user to authorize 3rd-party access to their data
        body:
          application/x-www-form-urlencoded:
            properties:
              client_id:
                description: The ID of the application attempting to be authorized
                required: false
                type: string
                example: "3f7eb03b-1e53-4dd7-8304-c7f52cef183d"
              scope:
                description: Space-delimited list of scopes the client is requesting
                required: false
                type: string
                example: "openid api:admin"
              state:
                description: a parameter with a string that will be supplied in a redirect back to the application upon success
                required: false
                type: string
              redirect_uri:
                description: Redirect uri for the application's authorization callback
                required: false
                type: string
              response_type:
                description: describes the type of object that the application wishes to receive upon success
                required: false
                type: string
              nonce:
                description: value used to mitigate replay attacks
                required: false
                type: string
        responses:
          302:
            description: |
              Redirects the user to the application's callback URI if the application is already authorized
              Redirects the user to the consent screen otherwise
          400:
            description: Bad request; an invalid redirect_uri, response_type or client_id
        is: [rate-limited]


    /decision:
      post:
        description: Confirms whether a user grants consent to a 3rd-party application
        responses:
          302:
            description: |
              Redirects the user to the application's callback URI

    /token:
      post:
        description: Allows 3rd-party applications to receive tokens via a variety of supported grant types

    /keys:
      get:
        description: Public JWK Set used to sign OpenID Connect id_tokens
        responses:
          200:
            description: |
              A JWK Set containing one or more JWK-formatted keys.
              For more information about the JWK format, see RFC-7517
              For more information about the use of JWKs in OpenID Connect, see the OpenID Connect Core 1.0 spec
        is: [rate-limited]

    /.well-known/openid-configuration:
      get:
        description: OpenID Connect Discovery Configuration
        responses:
          200:
            description: |
              The service's OpenID Provider Configuration Information metadata document.
              For more information about the contents and use of the document, see the OpenID Connect Discovery 1.0 spec
        is: [rate-limited]


    /userinfo:
      get:
        description: OpenID Connect Userinfo endpoint.
        responses:
          200:
            description: |
              A set of claims about the authenticated End-User.
              For more information about the use of the userinfo endpoint in OpenID Connect, see the OpenID Connect Core 1.0 spec
        is: [rate-limited]

      post:
        description: OpenID Connect Userinfo endpoint.
        responses:
          200:
            description: |
              A set of claims about the authenticated End-User.
              For more information about the use of the userinfo endpoint in OpenID Connect, see the OpenID Connect Core 1.0 spec
        is: [rate-limited]

    /introspect:
      post:
        description: Introspect an access token or refresh token
        securedBy: [basic]
        body:
          application/x-www-form-urlencoded:
            properties:
              token:
                description: The token to introspect
                type: string
                required: true
              token_type_hint:
                description: A hint about the type of the token submitted for introspection
                enum:
                  - access_token
                  - refresh_token
                required: false
                default: access_token

    /revoke:
      post:
        description: Revoke an access token or a refresh token
        body:
          application/x-www-form-urlencoded:
            properties:
              token:
                description: The token to revoke
                type: string
                required: true
              token_type_hint:
                description: A hint about the type of the token submitted for revocation
                enum:
                  - access_token
                  - refresh_token
                required: false
                default: access_token
        responses:
          200:
            description: Token was revoked successfully
        is: [rate-limited]
